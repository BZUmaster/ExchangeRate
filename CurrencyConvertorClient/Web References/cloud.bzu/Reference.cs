//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace CurrencyConvertorClient.cloud.bzu {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ExServiceSOAPSoapBinding", Namespace="http://bzu.cloud:8080/ExProj/services/")]
    public partial class ExService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CalculateExRateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ExService() {
            this.Url = global::CurrencyConvertorClient.Properties.Settings.Default.CurrencyConvertorClient_cloud_bzu_ExService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CalculateExRateCompletedEventHandler CalculateExRateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bzu.cloud:8080/ExProj/services/NewOperation", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Bare)]
        [return: System.Xml.Serialization.XmlElementAttribute("rate", Namespace="http://bzu.cloud:8080/ExProj/services/")]
        [CustomSoapExtension]
        public float CalculateExRate([System.Xml.Serialization.XmlElementAttribute(Namespace="http://bzu.cloud:8080/ExProj/services/")] currencies parameters) {
            object[] results = this.Invoke("CalculateExRate", new object[] {
                        parameters});
            return ((float)(results[0]));
        }
        
        /// <remarks/>
        public void CalculateExRateAsync(currencies parameters) {
            this.CalculateExRateAsync(parameters, null);
        }
        
        /// <remarks/>
        public void CalculateExRateAsync(currencies parameters, object userState) {
            if ((this.CalculateExRateOperationCompleted == null)) {
                this.CalculateExRateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCalculateExRateOperationCompleted);
            }
            this.InvokeAsync("CalculateExRate", new object[] {
                        parameters}, this.CalculateExRateOperationCompleted, userState);
        }
        
        private void OnCalculateExRateOperationCompleted(object arg) {
            if ((this.CalculateExRateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CalculateExRateCompleted(this, new CalculateExRateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://bzu.cloud:8080/ExProj/services/")]
    public partial class currencies {
        
        private System.Nullable<Currency> fromCurrencyField;
        
        private System.Nullable<Currency> toCurrencyField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<Currency> FromCurrency {
            get {
                return this.fromCurrencyField;
            }
            set {
                this.fromCurrencyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public System.Nullable<Currency> ToCurrency {
            get {
                return this.toCurrencyField;
            }
            set {
                this.toCurrencyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1064.2")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://bzu.cloud:8080/ExProj/services/")]
    public enum Currency {
        
        /// <remarks/>
        AUD,
        
        /// <remarks/>
        BGN,
        
        /// <remarks/>
        BRL,
        
        /// <remarks/>
        CAD,
        
        /// <remarks/>
        CHF,
        
        /// <remarks/>
        CNY,
        
        /// <remarks/>
        CZK,
        
        /// <remarks/>
        DKK,
        
        /// <remarks/>
        EUR,
        
        /// <remarks/>
        GBP,
        
        /// <remarks/>
        HKD,
        
        /// <remarks/>
        HRK,
        
        /// <remarks/>
        HUF,
        
        /// <remarks/>
        IDR,
        
        /// <remarks/>
        ILS,
        
        /// <remarks/>
        INR,
        
        /// <remarks/>
        JPY,
        
        /// <remarks/>
        KRW,
        
        /// <remarks/>
        MXN,
        
        /// <remarks/>
        MYR,
        
        /// <remarks/>
        NOK,
        
        /// <remarks/>
        NZD,
        
        /// <remarks/>
        PHP,
        
        /// <remarks/>
        PLN,
        
        /// <remarks/>
        RON,
        
        /// <remarks/>
        RUB,
        
        /// <remarks/>
        SEK,
        
        /// <remarks/>
        SGD,
        
        /// <remarks/>
        THB,
        
        /// <remarks/>
        TRY,
        
        /// <remarks/>
        USD,
        
        /// <remarks/>
        ZAR,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    public delegate void CalculateExRateCompletedEventHandler(object sender, CalculateExRateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1038.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CalculateExRateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CalculateExRateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public float Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((float)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591